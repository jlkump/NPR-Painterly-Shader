#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_worldspace;
layout(location = 1) in vec2 quad_uv_modelspace; // This is the bottom left corner of the quad
layout(location = 2) in float brush_width;
layout(location = 3) in float brush_length;
layout(location = 4) in float rotation_angle;
layout(location = 5) in vec3 color_variance;


// Output data ; will be interpolated for each fragment.
out vec2 ModelUV;
out vec3 BrushColor;
out float useBrushStroke;

uniform sampler2D renderedTexture;
uniform sampler2D brushTangentTexture;
uniform sampler2D brushBitangentTexture;
// uniform mat3 brushScale;
uniform vec3 backgroundColor;

void main() {
	// ScreenUV = (vertexPosition_worldspace.xy + vec2(1, 1)) / 2.0;
	// vec2 tangentFlow = (texture(brushTangentTexture, ScreenUV).xy + vec2(1,1)) / 2;
	// vec2 bitangentFlow = (texture(brushBitangentTexture, ScreenUV).xy + vec2(1,1)) / 2;

	float theta = rotation_angle; // -0.73491;
	float cosTheta = cos(theta);
	float sinTheta = sin(theta);

	mat3 brushScale = mat3(
		brush_width, 0.0, 0.0,
		0.0, brush_length, 0.0,
		0.0, 0.0, 1.0
	);

	vec3 vertexPosition_modelspace = vec3(quad_uv_modelspace.xy, 0.0);
	vertexPosition_modelspace = vertexPosition_modelspace + vec3(-0.5, -0.5, 0.0); // put the origin at the center of the quad
	vec3 pos = vec3(0.0, 0.0, 0.0);
	vertexPosition_modelspace = brushScale * vertexPosition_modelspace;
	pos.x = vertexPosition_modelspace.x * cosTheta - vertexPosition_modelspace.y * sinTheta;
	pos.y = vertexPosition_modelspace.x * sinTheta + vertexPosition_modelspace.y * cosTheta;
	pos = pos + (pos - vertexPosition_worldspace);

	gl_Position = vec4(pos,1);
	// ScreenUV = (pos.xy+vec2(1,1))/2.0; 
	BrushColor = texture(renderedTexture, (pos.xy+vec2(1,1))/2.0).rgb;
	if (length(BrushColor - backgroundColor) <= 0.0) {
		useBrushStroke = 1.0;
	} else {
		useBrushStroke = 0.0;
	}
	BrushColor = BrushColor + color_variance;

	ModelUV = quad_uv_modelspace; // + vec2(1, 1) * (1.0 + sin(length(quad_uv_modelspace)) / 2.0);

}
